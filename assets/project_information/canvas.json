{
    "project_name":"canvas",
    "description":"<b>Description:</b><br>Python (Flask) web application utilizing the Canvas and DOM APIs. Users may create in-browser pieces and export files locally with the Javascript functions. WSGI Server (Gunicorn) is invoked with a Powershell command.<br><br>Future development additions will utilize P2P connections with the WebSockets API to allow for real-time connectivity between users.",
    "challenges":"<b>Challenges:</b><br>The project ran into many various developmental roadblocks.<br>Example: The project kickstarted with the Django framework. Due to having little experience with industry standard full-stack frameworks, research pointed me to use Django. I'm most comfortable with Python and find iteration to be quick which would help greatly given the schedule ahead. However, the framework proved to be difficult to develop in, thus requiring me to shift gears. Through more research and assistance from my professor, I chose to shift to Flask instead. As per the senior capstone project requirements, there were deadlines that needed to be met. The change of plans resulted in many hours of development time to be scrapped which set the project massively behind schedule. This meant that certain features needed to be cut from the final product.",
    "outcome":"<b>Outcome:</b><br>At the time of writing (11-04-24), the project is still under development. While development progress under the Flask framework has been proceeding at a better pace than with the prior tech stack, the initial promised features operate differently.<br>For example: Canvas uses a bitmap grid (<i>similar to Drawpile</i>) instead of vector based objects (<i>similar to Excalidraw</i>).<br><br>The project deployed successfully to the website host (Render), although loading time will be quite lengthy due to the tier-policy. During the project, I realized that the Canvas program could run entirely on a static site and be hosted via websites such as Github at the current point in time. The planned web connectivity feature necessitates a back-end server to process data between client browsers.",
    "technologies":["python", "flask", "html", "css", "js"],
    "screenshot_quantity":"1"
}