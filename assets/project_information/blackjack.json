{
    "project_name":"blackjack",
    "description":"<b>Description:</b><br>A Python command line interface program which allows a player to play Blackjack against an AI (utilizing the Monte Carlo algorithm) and the dealer.",
    "challenges":"<b>Challenges:</b><br>Some challenges arrived in the form of wanting to write cleaner code with the new concept of game states. On top of aiming to implement an algorithm for the AI, I needed to choose fitting logic for both the dealer and the other player which both operate on different rules.",
    "outcome":"<b>Outcome:</b><br>I ultimately decided to go with the Monte Carlo algorithm for the AI. The Monte Carlo agent effectively predicts the best odds based on their existing hand and the remaining cards left in the deck. The behavior mimics typical casino card counting.<br><br>Interestingly, the Monte Carlo Player loses (on average) more than the player (me) and the dealer. Monte Carlo returns the \"best answer\" it can with the given number of iterations. Given the fact that I set a low number of iterations, I believe that explains the poor winrate. Setting the iteration amount to a higher number would yield statistically better results.<br><br>Additionally, I enjoyed being able to build a program in a much more free-form environment, allowing me to experiment with some OOP principles (such as polymorphism).<br>Example: All players share the same set of actions while managing their own game states. The Game class is able to call any player regardless of the specific player type.<br><br>Ultimately, the project succeeds in implementing the house and Monte Carlo agents.",
    "technologies":["python", "cli"],
    "screenshot_quantity":"1"
}